// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let surveyData = [];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initializeTabs();
    initializeForm();
    loadResults();
    setupOtherInputs();
});

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–∞–º–∏
function initializeTabs() {
    const tabButtons = document.querySelectorAll('.nav-tab');
    const tabContents = document.querySelectorAll('.tab-content');

    tabButtons.forEach(button => {
        button.addEventListener('click', () => {
            const targetTab = button.getAttribute('data-tab');
            
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
            tabButtons.forEach(btn => btn.classList.remove('active'));
            tabContents.forEach(content => content.classList.remove('active'));
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
            button.classList.add('active');
            document.getElementById(targetTab).classList.add('active');
            
            // –ï—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
            if (targetTab === 'results') {
                displayResults();
            }
        });
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
function initializeForm() {
    const form = document.getElementById('surveyForm');
    
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        if (validateForm()) {
            const formData = collectFormData();
            saveResponse(formData);
            sendToWhatsApp(formData);
        }
    });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–µ–π "–î—Ä—É–≥–æ–µ"
function setupOtherInputs() {
    const businessTypeRadios = document.querySelectorAll('input[name="business_type"]');
    const otherInput = document.querySelector('input[name="business_type_other"]');
    
    businessTypeRadios.forEach(radio => {
        radio.addEventListener('change', function() {
            if (this.value === 'other') {
                otherInput.style.display = 'block';
                otherInput.required = true;
            } else {
                otherInput.style.display = 'none';
                otherInput.required = false;
                otherInput.value = '';
            }
        });
    });
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
function validateForm() {
    const requiredFields = [
        'business_type',
        'revenue', 
        'main_problems',
        'decision_making',
        'payment_readiness',
        'ai_usage',
        'ai_trust',
        'hypothesis_interest',
        'main_concern',
        'testing_interest'
    ];
    
    let isValid = true;
    let firstError = null;
    
    requiredFields.forEach(fieldName => {
        const field = document.querySelector(`input[name="${fieldName}"], textarea[name="${fieldName}"]`);
        
        if (fieldName === 'main_problems') {
            // –î–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—ã–±—Ä–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω
            const checkboxes = document.querySelectorAll(`input[name="${fieldName}"]:checked`);
            if (checkboxes.length === 0) {
                isValid = false;
                if (!firstError) firstError = document.querySelector(`input[name="${fieldName}"]`);
            } else if (checkboxes.length > 2) {
                alert('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ –±–æ–ª–µ–µ 2 –≥–ª–∞–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º');
                isValid = false;
                if (!firstError) firstError = document.querySelector(`input[name="${fieldName}"]`);
            }
        } else {
            // –î–ª—è —Ä–∞–¥–∏–æ –∫–Ω–æ–ø–æ–∫
            const checked = document.querySelector(`input[name="${fieldName}"]:checked`);
            if (!checked) {
                isValid = false;
                if (!firstError) firstError = document.querySelector(`input[name="${fieldName}"]`);
            }
        }
    });
    
    if (!isValid) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã');
                if (firstError) {
            firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
        return false;
    }
    
    return true;
}

// –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
function collectFormData() {
    const formData = {
        timestamp: new Date().toISOString(),
        business_type: getRadioValue('business_type'),
        business_type_other: document.querySelector('input[name="business_type_other"]').value,
        revenue: getRadioValue('revenue'),
        main_problems: getCheckboxValues('main_problems'),
        decision_making: getRadioValue('decision_making'),
        biggest_pain: document.querySelector('textarea[name="biggest_pain"]').value,
        payment_readiness: getRadioValue('payment_readiness'),
        ai_usage: getRadioValue('ai_usage'),
        ai_trust: getRadioValue('ai_trust'),
        hypothesis_interest: getRadioValue('hypothesis_interest'),
        main_concern: getRadioValue('main_concern'),
        testing_interest: getRadioValue('testing_interest'),
        contact: document.querySelector('input[name="contact"]').value
    };
    
    return formData;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–¥–∏–æ –∫–Ω–æ–ø–∫–∏
function getRadioValue(name) {
    const checked = document.querySelector(`input[name="${name}"]:checked`);
    return checked ? checked.value : '';
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —á–µ–∫–±–æ–∫—Å–æ–≤
function getCheckboxValues(name) {
    const checked = document.querySelectorAll(`input[name="${name}"]:checked`);
    return Array.from(checked).map(cb => cb.value);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ localStorage
function saveResponse(formData) {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        const existingData = localStorage.getItem('surveyResponses');
        let responses = existingData ? JSON.parse(existingData) : [];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        responses.push(formData);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        localStorage.setItem('surveyResponses', JSON.stringify(responses));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        surveyData = responses;
        
        console.log('–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', formData);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ localStorage
function loadResults() {
    try {
        const existingData = localStorage.getItem('surveyResponses');
        surveyData = existingData ? JSON.parse(existingData) : [];
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
        surveyData = [];
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ WhatsApp
function sendToWhatsApp(formData) {
    const phoneNumber = '79280187060';
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = 'üéØ –ù–û–í–´–ô –û–¢–í–ï–¢ –ù–ê –û–ü–†–û–°\n\n';
    
    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    message += `üìä –ë–ò–ó–ù–ï–°:\n`;
    message += `‚Ä¢ –°—Ñ–µ—Ä–∞: ${getBusinessTypeText(formData.business_type, formData.business_type_other)}\n`;
    message += `‚Ä¢ –í—ã—Ä—É—á–∫–∞: ${getRevenueText(formData.revenue)}\n\n`;
    
    // –ü—Ä–æ–±–ª–µ–º—ã
    message += `üî• –ü–†–û–ë–õ–ï–ú–´:\n`;
    message += `‚Ä¢ –ì–ª–∞–≤–Ω—ã–µ: ${formData.main_problems.map(p => getProblemText(p)).join(', ')}\n`;
    message += `‚Ä¢ –†–µ—à–µ–Ω–∏—è: ${getDecisionMakingText(formData.decision_making)}\n`;
    if (formData.biggest_pain) {
        message += `‚Ä¢ –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –±–µ—Å–∏—Ç: "${formData.biggest_pain}"\n`;
    }
    message += '\n';
    
    // –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–∏—Ç—å
    message += `üí∞ –ì–û–¢–û–í–ù–û–°–¢–¨ –ü–õ–ê–¢–ò–¢–¨:\n`;
    message += `‚Ä¢ ${getPaymentText(formData.payment_readiness)}\n\n`;
    
    // –ò–ò
    message += `ü§ñ –û–¢–ù–û–®–ï–ù–ò–ï –ö –ò–ò:\n`;
    message += `‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ${getAIUsageText(formData.ai_usage)}\n`;
    message += `‚Ä¢ –î–æ–≤–µ—Ä–∏–µ: ${getAITrustText(formData.ai_trust)}\n\n`;
    
    // –ì–∏–ø–æ—Ç–µ–∑–∞
    message += `üéØ –ù–ê–®–ê –ì–ò–ü–û–¢–ï–ó–ê:\n`;
    message += `‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å: ${getHypothesisText(formData.hypothesis_interest)}\n`;
    message += `‚Ä¢ –û–ø–∞—Å–µ–Ω–∏—è: ${getConcernText(formData.main_concern)}\n`;
    message += `‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${getTestingText(formData.testing_interest)}\n\n`;
    
    // –ö–æ–Ω—Ç–∞–∫—Ç
    if (formData.contact) {
        message += `üìû –ö–û–ù–¢–ê–ö–¢: ${formData.contact}\n\n`;
    }
    
    message += `‚è∞ –í—Ä–µ–º—è: ${new Date(formData.timestamp).toLocaleString('ru-RU')}`;
    
    // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É WhatsApp
    const whatsappUrl = `https://wa.me/${phoneNumber}?text=${encodeURIComponent(message)}`;
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º WhatsApp
    window.open(whatsappUrl, '_blank');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    showSuccessMessage();
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
function showSuccessMessage() {
    const successDiv = document.createElement('div');
    successDiv.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: linear-gradient(135deg, #00b894, #00cec9);
        color: white;
        padding: 30px;
        border-radius: 15px;
        text-align: center;
        box-shadow: 0 10px 30px rgba(0,0,0,0.3);
        z-index: 1000;
        font-size: 18px;
        font-weight: bold;
    `;
    
    successDiv.innerHTML = `
        <div style="font-size: 48px; margin-bottom: 15px;">üéâ</div>
        <div>–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!</div>
        <div style="font-size: 14px; margin-top: 10px; opacity: 0.9;">
            –û—Ç–≤–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ WhatsApp
        </div>
    `;
    
    document.body.appendChild(successDiv);
    
    // –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        document.body.removeChild(successDiv);
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        document.querySelector('.nav-tab[data-tab="results"]').click();
    }, 3000);
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function displayResults() {
    const resultsContent = document.getElementById('resultsContent');
    const totalResponses = document.getElementById('totalResponses');
    
    if (surveyData.length === 0) {
        resultsContent.innerHTML = `
            <div class="no-results">
                <p>–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º! üöÄ</p>
            </div>
        `;
        totalResponses.textContent = '0';
        return;
    }
    
    totalResponses.textContent = surveyData.length;
    
    let html = '';
    
    // –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ñ–µ—Ä–∞–º –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    html += createResultBlock('–°—Ñ–µ—Ä—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', analyzeBusinessTypes());
    
    // –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—ã—Ä—É—á–∫–µ
    html += createResultBlock('–†–∞–∑–º–µ—Ä –±–∏–∑–Ω–µ—Å–∞ (–≤—ã—Ä—É—á–∫–∞)', analyzeRevenue());
    
    // –ê–Ω–∞–ª–∏–∑ –≥–ª–∞–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
    html += createResultBlock('–ì–ª–∞–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã', analyzeMainProblems());
    
    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
    html += createResultBlock('–ö–∞–∫ –ø—Ä–∏–Ω–∏–º–∞—é—Ç —Ä–µ—à–µ–Ω–∏—è', analyzeDecisionMaking());
    
    // –ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç–∏—Ç—å
    html += createResultBlock('–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–∏—Ç—å', analyzePaymentReadiness());
    
    // –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ò–ò
    html += createResultBlock('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ò–ò', analyzeAIUsage());
    
    // –ê–Ω–∞–ª–∏–∑ –¥–æ–≤–µ—Ä–∏—è –∫ –ò–ò
    html += createResultBlock('–î–æ–≤–µ—Ä–∏–µ –∫ –ò–ò –≤ –±–∏–∑–Ω–µ—Å–µ', analyzeAITrust());
    
    // –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –≥–∏–ø–æ—Ç–µ–∑–µ
    html += createResultBlock('–ò–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–µ–º—É –ø—Ä–æ–¥—É–∫—Ç—É', analyzeHypothesis());
    
    // –ê–Ω–∞–ª–∏–∑ –æ–ø–∞—Å–µ–Ω–∏–π
    html += createResultBlock('–ì–ª–∞–≤–Ω—ã–µ –æ–ø–∞—Å–µ–Ω–∏—è', analyzeConcerns());
    
    // –ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
    html += createResultBlock('–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', analyzeTesting());
    
    // –¢–æ–ø –±–æ–ª–µ–π (—Å–≤–æ–±–æ–¥–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã)
    if (surveyData.some(r => r.biggest_pain)) {
        html += createTextResultBlock('–ß—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –±–µ—Å–∏—Ç –≤ –±–∏–∑–Ω–µ—Å–µ', analyzeTextResponses());
    }
    
    resultsContent.innerHTML = html;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function createResultBlock(title, data) {
    const total = surveyData.length;
    
    let html = `
        <div class="result-block">
            <h4>${title}</h4>
    `;
    
    data.forEach(item => {
        const percentage = total > 0 ? Math.round((item.count / total) * 100) : 0;
        html += `
            <div class="result-item">
                <div class="result-label">${item.label}</div>
                <div class="result-count">${item.count}</div>
            </div>
            <div class="result-bar">
                <div class="result-fill" style="width: ${percentage}%"></div>
            </div>
        `;
    });
    
    html += '</div>';
    return html;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
function createTextResultBlock(title, responses) {
    let html = `
        <div class="result-block">
            <h4>${title}</h4>
    `;
    
    responses.forEach((response, index) => {
        if (response.trim()) {
            html += `
                <div class="result-item" style="flex-direction: column; align-items: flex-start;">
                    <div style="font-size: 12px; color: #6c757d; margin-bottom: 5px;">
                        –û—Ç–≤–µ—Ç #${index + 1}
                    </div>
                    <div style="font-style: italic; color: #2d3436;">
                        "${response}"
                    </div>
                </div>
            `;
        }
    });
    
    html += '</div>';
    return html;
}

// –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
function analyzeBusinessTypes() {
    const counts = {};
    surveyData.forEach(response => {
        const type = response.business_type === 'other' && response.business_type_other 
            ? response.business_type_other 
            : getBusinessTypeText(response.business_type);
        counts[type] = (counts[type] || 0) + 1;
    });
    
    return Object.entries(counts)
        .map(([label, count]) => ({ label, count }))
        .sort((a, b) => b.count - a.count);
}

function analyzeRevenue() {
    const counts = {};
    surveyData.forEach(response => {
        const revenue = getRevenueText(response.revenue);
        counts[revenue] = (counts[revenue] || 0) + 1;
    });
    
    return Object.entries(counts)
        .map(([label, count]) => ({ label, count }))
        .sort((a, b) => b.count - a.count);
}

function analyzeMainProblems() {
    const counts = {};
    surveyData.forEach(response => {
        response.main_problems.forEach(problem => {
            const problemText = getProblemText(problem);
            counts[problemText] = (counts[problemText] || 0) + 1;
        });
    });
    
    return Object.entries(counts)
        .map(([label, count]) => ({ label, count }))
        .sort((a, b) => b.count - a.count);
}

function analyzeDecisionMaking() {
    const counts = {};
    surveyData.forEach(response => {
        const decision = getDecisionMakingText(response.decision_making);
        counts[decision] = (counts[decision] || 0) + 1;
    });
    
    return Object.entries(counts)
        .map(([label, count]) => ({ label, count }))
        .sort((a, b) => b.count - a.count);
}

function analyzePaymentReadiness() {
    const counts = {};
    surveyData.forEach(response => {
        const payment = getPaymentText(response.payment_readiness);
        counts[payment] = (counts[payment] || 0) + 1;
    });
    
    return Object.entries(counts)
        .map(([label, count]) => ({ label, count }))
        .sort((a, b) => b.count - a.count);
}

function analyzeAIUsage() {
    const counts = {};
    surveyData.forEach(response => {
        const usage = getAIUsageText(response.ai_usage);
        counts[usage] = (counts[usage] || 0) + 1;
    });
    
    return Object.entries(counts)
        .map(([label, count]) => ({ label, count }))
        .sort((a, b) => b.count - a.count);
}

function analyzeAITrust() {
    const counts = {};
    surveyData.forEach(response => {
        const trust = getAITrustText(response.ai_trust);
        counts[trust] = (counts[trust] || 0) + 1;
    });
    
    return Object.entries(counts)
        .map(([label, count]) => ({ label, count }))
        .sort((a, b) => b.count - a.count);
}

function analyzeHypothesis() {
    const counts = {};
    surveyData.forEach(response => {
        const hypothesis = getHypothesisText(response.hypothesis_interest);
        counts[hypothesis] = (counts[hypothesis] || 0) + 1;
    });
    
    return Object.entries(counts)
        .map(([label, count]) => ({ label, count }))
        .sort((a, b) => b.count - a.count);
}

function analyzeConcerns() {
    const counts = {};
    surveyData.forEach(response => {
        const concern = getConcernText(response.main_concern);
        counts[concern] = (counts[concern] || 0) + 1;
    });
    
    return Object.entries(counts)
        .map(([label, count]) => ({ label, count }))
        .sort((a, b) => b.count - a.count);
}

function analyzeTesting() {
    const counts = {};
    surveyData.forEach(response => {
        const testing = getTestingText(response.testing_interest);
        counts[testing] = (counts[testing] || 0) + 1;
    });
    
    return Object.entries(counts)
        .map(([label, count]) => ({ label, count }))
        .sort((a, b) => b.count - a.count);
}

function analyzeTextResponses() {
    return surveyData
        .map(response => response.biggest_pain)
        .filter(pain => pain && pain.trim());
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç
function getBusinessTypeText(type, other = '') {
    const types = {
        'retail': '–†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è',
        'services': '–£—Å–ª—É–≥–∏',
        'food': '–û–±—â–µ–ø–∏—Ç',
        'production': '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ/–º–∞—Å—Ç–µ—Ä—Å–∫–∞—è',
        'other': other || '–î—Ä—É–≥–æ–µ'
    };
    return types[type] || type;
}

function getRevenueText(revenue) {
    const revenues = {
        '0-100k': '–î–æ 100 —Ç—ã—Å. —Ä—É–±',
        '100-300k': '100-300 —Ç—ã—Å. —Ä—É–±',
        '300-500k': '300-500 —Ç—ã—Å. —Ä—É–±',
        '500k-1m': '500 —Ç—ã—Å - 1 –º–ª–Ω —Ä—É–±',
        '1m+': '–ë–æ–ª—å—à–µ 1 –º–ª–Ω —Ä—É–±'
    };
    return revenues[revenue] || revenue;
}

function getProblemText(problem) {
    const problems = {
        'few_clients': '–ú–∞–ª–æ –∫–ª–∏–µ–Ω—Ç–æ–≤/–∑–∞–∫–∞–∑–æ–≤',
        'competition': '–í—ã—Å–æ–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è',
        'dont_know_what_to_buy': '–ù–µ –∑–Ω–∞—é —á—Ç–æ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å/–∑–∞–∫—É–ø–∞—Ç—å',
        'dead_stock': '–¢–æ–≤–∞—Ä –ª–µ–∂–∏—Ç –º–µ—Ä—Ç–≤—ã–º –≥—Ä—É–∑–æ–º',
        'no_money': '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ',
        'staff': '–°–ª–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ö–æ—Ä–æ—à–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤',
        'routine': '–ú–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ä—É—Ç–∏–Ω—É',
        'no_analytics': '–ù–µ –ø–æ–Ω–∏–º–∞—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏'
    };
    return problems[problem] || problem;
}

function getDecisionMakingText(decision) {
    const decisions = {
        'intuition': '–ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ, –ø–æ –æ–ø—ã—Ç—É',
        'advice': '–°–æ–≤–µ—Ç—É—é—Å—å —Å –∫–æ–ª–ª–µ–≥–∞–º–∏/–¥—Ä—É–∑—å—è–º–∏',
        'competitors': '–ò–∑—É—á–∞—é –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤',
        'analytics': '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ü–∏—Ñ—Ä—ã –∏ –æ—Ç—á–µ—Ç—ã',
        'consultants': '–ù–∞–Ω–∏–º–∞—é –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤'
    };
    return decisions[decision] || decision;
}

function getPaymentText(payment) {
    const payments = {
        'free': '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ –∏–ª–∏ –Ω–∏–∫–∞–∫',
        '1k': '–î–æ 1000 —Ä—É–±/–º–µ—Å—è—Ü',
        '1-3k': '1000-3000 —Ä—É–±/–º–µ—Å—è—Ü',
        '3-5k': '3000-5000 —Ä—É–±/–º–µ—Å—è—Ü',
        '5k+': '–ë–æ–ª—å—à–µ 5000 —Ä—É–±/–º–µ—Å—è—Ü',
        'percentage': '–ì–æ—Ç–æ–≤ –ø–ª–∞—Ç–∏—Ç—å % —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'
    };
    return payments[payment] || payment;
}

function getAIUsageText(usage) {
    const usages = {
        'constantly': '–î–∞, –ø–æ—Å—Ç–æ—è–Ω–Ω–æ',
        'sometimes': '–ò–Ω–æ–≥–¥–∞ –ø—Ä–æ–±—É—é',
        'heard': '–°–ª—ã—à–∞–ª, –Ω–æ –Ω–µ –ø–æ–ª—å–∑—É—é—Å—å',
        'distrust': '–ù–µ –¥–æ–≤–µ—Ä—è—é —ç—Ç–æ–º—É',
        'unknown': '–ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ?'
    };
    return usages[usage] || usage;
}

function getAITrustText(trust) {
    const trusts = {
        'yes_if_works': '–î–∞, –µ—Å–ª–∏ —Å–æ–≤–µ—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç',
        'additional': '–¢–æ–ª—å–∫–æ –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ —á–µ–ª–æ–≤–µ–∫—É',
        'no': '–ù–µ—Ç, –Ω–µ –¥–æ–≤–µ—Ä—è—é',
        'depends_price': '–ó–∞–≤–∏—Å–∏—Ç –æ—Ç —Ü–µ–Ω—ã',
        'dont_know': '–ù–µ –∑–Ω–∞—é'
    };
    return trusts[trust] || trust;
}

function getHypothesisText(hypothesis) {
    const hypotheses = {
        'very': '–û—á–µ–Ω—å! –ì–¥–µ –≤–∑—è—Ç—å?',
        'interesting': '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –Ω–æ –µ—Å—Ç—å —Å–æ–º–Ω–µ–Ω–∏—è',
        'not_really': '–ù–µ –æ—á–µ–Ω—å, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –ª—é–¥–µ–π',
        'not_at_all': '–°–æ–≤—Å–µ–º –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ'
    };
    return hypotheses[hypothesis] || hypothesis;
}

function getConcernText(concern) {
    const concerns = {
        'bad_advice': '–î–∞—Å—Ç –ø–ª–æ—Ö–æ–π —Å–æ–≤–µ—Ç',
        'data_security': '–£–∫—Ä–∞–¥–µ—Ç/—Å–æ–ª—å–µ—Ç –¥–∞–Ω–Ω—ã–µ',
        'complexity': '–°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è',
        'expensive': '–î–æ—Ä–æ–≥–æ –≤—ã–π–¥–µ—Ç',
        'no_understanding': '–ù–µ –ø–æ–Ω–∏–º–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –º–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞'
    };
    return concerns[concern] || concern;
}

function getTestingText(testing) {
    const testings = {
        'yes': '–î–∞! –ì–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é',
        'maybe': '–í–æ–∑–º–æ–∂–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ',
        'no': '–ü–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤'
    };
    return testings[testing] || testing;
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX
document.addEventListener('DOMContentLoaded', function() {
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏
    const formInputs = document.querySelectorAll('input, textarea');
    formInputs.forEach(input => {
        input.addEventListener('change', function() {
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
            console.log('–ü–æ–ª–µ –∏–∑–º–µ–Ω–µ–Ω–æ:', this.name, this.value);
        });
    });
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    updateProgress();
});

function updateProgress() {
    const totalQuestions = 11; // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    let answeredQuestions = 0;
    
    const requiredFields = [
        'business_type', 'revenue', 'main_problems', 'decision_making',
        'payment_readiness', 'ai_usage', 'ai_trust', 'hypothesis_interest',
        'main_concern', 'testing_interest'
    ];
    
    requiredFields.forEach(fieldName => {
        if (fieldName === 'main_problems') {
            const checkboxes = document.querySelectorAll(`input[name="${fieldName}"]:checked`);
            if (checkboxes.length > 0) answeredQuestions++;
        } else {
            const checked = document.querySelector(`input[name="${fieldName}"]:checked`);
            if (checked) answeredQuestions++;
        }
    });
    
    const progress = Math.round((answeredQuestions / totalQuestions) * 100);
    
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    console.log(`–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: ${progress}%`);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–µ–π
document.addEventListener('change', updateProgress);

        